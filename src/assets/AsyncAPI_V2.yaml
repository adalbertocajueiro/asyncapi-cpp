asyncapi: '2.6.0'
id: 'urn:example:es:us:edscorbot:mqtt-server'

info:
  title: Streetlights Kafka API
  version: '1.0.0'
  description: |
    The Smartylighting Streetlights API allows you to remotely manage the city lights.
    ### Check out its awesome features:
    * Turn a specific streetlight on/off ðŸŒƒ
    * Dim a specific streetlight ðŸ˜Ž
    * Receive real-time information about environmental lighting conditions ðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  mosquitto:
    url: 192.168.1.104
    protocol: mqtt
    description: Mosquitto broker hosted at University of Sevilla
    
  edscorbot-server:
    url: 192.168.1.115
    protocol: mqtt
    description: Controller running inside the physical robotic arm with name `EDScorbot`

  simulated-server:
    url: 192.168.1.104
    protocol: mqtt
    description: Simulated controller running in a computer simulating a robotic arm with name `EDScorbotSim`

defaultContentType: application/json

channels:
  'get_metainfo':
    description: Channel/topic provided to allow communication of metainfos. This channel plays the role of a "meta" channel where multiple **CONTROLLERS** can publish information about themselves and **CLIENTS** can obtain information about all registered arms, so they can choose which arm to connect.    
    publish:
      operationId: getMetainfoPub
      message:
        payload:
          $ref: '#/components/schemas/Client'

    subscribe:
      operationId: getMetainfoSub
      message:
        payload:
          $ref: '#/components/schemas/Client'

  'metainfo':
    description: Channel/topic provided to allow communication of metainfos. This channel plays the role of a "meta" channel where multiple **CONTROLLERS** can publish information about themselves and **CLIENTS** can obtain information about all registered arms, so they can choose which arm to connect.    
    publish:
      operationId: metainfoPub
      message:
        payload:
          $ref: '#/components/schemas/MetaInfoObject'

    subscribe:
      operationId: metainfoSub
      message:
        payload:
          $ref: '#/components/schemas/MetaInfoObject'

  'ROBOT_NAME/get_status':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: getStatusPub
      message:
        payload:
          $ref: '#/components/schemas/Client'

    subscribe: 
      operationId: getStatusSub
      message:
        payload:
          $ref: '#/components/schemas/Client'

  'ROBOT_NAME/status':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: statusPub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
    subscribe: 
      operationId: statusSub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
  
  'ROBOT_NAME/connect':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: connectPub
      message:
        payload:
          $ref: '#/components/schemas/Client'
    subscribe: 
      operationId: connectSub
      message:
        payload:
          $ref: '#/components/schemas/Client'

  'ROBOT_NAME/connected':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: connectedPub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
    subscribe: 
      operationId: connectedSub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
  
  'ROBOT_NAME/move_to_point':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: moveToPointPub
      message:
        payload:
          $ref: '#/components/schemas/MoveToPointObject'
    subscribe: 
      operationId: moveToPointSub
      message:
        payload:
          $ref: '#/components/schemas/MoveToPointObject'

  'ROBOT_NAME/apply_trajectory':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: applyTrajectoryPub
      message:
        payload:
          $ref: '#/components/schemas/ApplyTrajectoryObject'
    subscribe: 
      operationId: applyTrajectorySub
      message:
        payload:
          $ref: '#/components/schemas/ApplyTrajectoryObject'

  'ROBOT_NAME/cancel_trajectory':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: cancelTrajectoryPub
      message:
        payload:
          $ref: '#/components/schemas/Client'
    subscribe: 
      operationId: cancelTrajectorySub
      message:
        payload:
          $ref: '#/components/schemas/Client'

  'ROBOT_NAME/canceled_trajectory':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: canceledTrajectoryPub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
    subscribe: 
      operationId: canceledTrajectorySub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'

  'ROBOT_NAME/disconnect':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: disconnectPub
      message:
        payload:
          $ref: '#/components/schemas/Client'
    subscribe: 
      operationId: disconnectSub
      message:
        payload:
          $ref: '#/components/schemas/Client'

  'ROBOT_NAME/disconnected':
    description: UPD Channel/topic provided to allow interactions so that commands can be sent by **CLIENTS** and suitable answers can be returned by the **CONTROLLER**.  
    publish:
      operationId: disconnectedPub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'
    subscribe: 
      operationId: disconnectedSub
      message:
        payload:
          $ref: '#/components/schemas/ControllerInfo'

  'ROBOT_NAME/home_seached':
    description: Channel/topic provided to allow the **CONTROLLER** to publish the last point of the arm. The controller is supposed to publish this point each time the arm is moved. Therefore, it does not matter if the controller has moved the arm to the home position of is executing an entire trajectory.  
    publish:
      operationId: homeSearchedPub
      message:
        payload:
          $ref: '#/components/schemas/Client'
    subscribe:
      operationId: homeSearchedSub
      message:
        payload:
          $ref: '#/components/schemas/Client'
          
  'ROBOT_NAME/moved':
    description: Channel/topic provided to allow the **CONTROLLER** to publish the last point of the arm. The controller is supposed to publish this point each time the arm is moved. Therefore, it does not matter if the controller has moved the arm to the home position of is executing an entire trajectory.  
    publish:
      operationId: movedPub
      message:
        payload:
          $ref: '#/components/schemas/MovedObject'
    subscribe:
      operationId: movedSub
      message:
        payload:
          $ref: '#/components/schemas/MovedObject'
  
components:
  schemas:
    Client:
      type: object
      description: A client of the arm. It represents an arm's user.
      properties:
        id:
          type: string
          description: The client identifier (username)
    
    Point:
      type: object
      description: A tuple containing the angles of each joint and one information (the last coordinate) meaning the time to wait after moving the arm to this point. The use of an internal list provides a flexible ways to allow many robots, as they can have different number of joints.  
      properties:
        coordinates:
          type: array
          items:
            type: number
    
    Trajectory:
      type: object
      description: An object encapsulating a list of points to be applied. 
      properties:
        points:
          type: array
          description: A list of points to be applied to the arm.
          items:
            $ref: '#/components/schemas/Point'

    MetaInfoObject:
      type: object
      description: The metainfo about one robot.
      properties:
        name:
          type: string
          description: The name of the robot
        joints:
          type: array
          description: The list of all joints of the robot
          items:
            $ref: '#/components/schemas/JointInfo'

    JointInfo:
      type: object
      description: Information about a joint.
      properties:
        minimum:
          type: number
        maximum:
          type: number

    ControllerInfo:
      type: object
      description: The information about the controller.
      properties:
        error:
          type: boolean
          description: A flag representing that the controller is in an internal error state probably due to some problem with the physical arm. 
        client:
          description: The user involved in a command exchanged between **CLIENTS** and **CONTROLLER**
          $ref: '#/components/schemas/Client'

    MoveToPointObject:
      type: object
      description: The information containing the point to move the arm.
      properties: 
        client:
          description: The user involved in a command exchanged between **CLIENTS** and **CONTROLLER**
          $ref: '#/components/schemas/Client'
        point:
          description: The user involved in a command exchanged between **CLIENTS** and **CONTROLLER**
          $ref: '#/components/schemas/Point'

    ApplyTrajectoryObject:
      type: object
      description: The information containing the point to move the arm.
      properties: 
        client:
          description: The user involved in a command exchanged between **CLIENTS** and **CONTROLLER**
          $ref: '#/components/schemas/Client'
        trajectory:
          description: A trajectory to be applied to the arm. This field is present only then `signal = ARM_APPLY_TRAJECTORY`.
          $ref: '#/components/schemas/Trajectory'
          
    MovedObject:
      type: object
      description: An object encapsulating all relevant information about a movement of the arm. 
      properties:
        client:
          $ref: '#/components/schemas/Client'
          description: The owner of the arm (only him can move the arm).
        error:
          type: boolean
          description: A flag representing that the controller is in an internal error state probably due to some problem with the physical arm. 
        content:
          $ref: '#/components/schemas/Point'